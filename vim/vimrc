set nocompatible                " This must be first, because it changes other options as a side effect
filetype off
syntax on
filetype plugin indent on

call plug#begin('~/.vim/plugged')
Plug 'flazz/vim-colorschemes'       " Colors
Plug 'junegunn/fzf.vim'             " Fzf vim wrapper
Plug 'w0rp/ale'                     " Linting
Plug 'itchyny/lightline.vim'        " Lightweight status line
call plug#end() " Initialize plugin system

" If using tmux and iTerm2 on OSX, the following changes the cursor from a block to a cursor
" {{{
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}

" -----------
" Options
" -----------
set tabstop=2                   " Show existing tab with 2 spaces
set shiftwidth=2      		      " When indenting with '>' use 2 spaces
set softtabstop=2               " number of spaces in tab when editing
set expandtab                   " On pressing tab insert 2 spaces
set updatetime=300              " You will have bad experience for diagnostic messages when it's default 4000.
set viewoptions=folds,options,cursor,unix,slash
set autoindent                  " set auto-indenting on for programming
set autoread                    " auto reload files in the buffer
set noswapfile                  " get rid of swap
set showmatch                   " automatically show matching brackets
set showcmd                     " show command in bottom bar
set cursorline                  " highlight current line
set ruler                       " show the cursor position all the time
set mouse=a                     " Enable mouse usage
set ttymouse=xterm2             " mouse codes from iTem that Vim will recognize
set guioptions+=a               " autoselect in gui mode
set backspace=indent,eol,start  " make that backspace key work the way it should
set showmode                    " show the current mode
set number                      " show line numbers
set history=1000                " store lots of :cmdline history
set hlsearch                    " highlight matches
set incsearch                   " search as characters are entered
set ignorecase                  " ignore case while searching
set smartcase                   " combined with 'ignorecase' search is only case sensitive when an upprercase letter is used
set wildmenu                    " visual autocomplete for command menu
set splitbelow                  " new horizontal split pane to the bottom
set splitright                  " new vertical split pane to the right
set t_Co=256                    " tell the term has 256 colors
set background=light            " Use colours that work well on a dark background (Console is usually black)
set timeoutlen=1000 ttimeoutlen=0 " Eliminate ESC delay - timeoutlen is used for mapping delays, and ttimeoutlen is used for key code delays
set laststatus=2                 " Show status line
set clipboard=unnamed            " Use clipboard register for everything except delete
set path+=**                     " Search down into subfolders
set wildmenu                     " Display all matching files when we tab complete
set rtp+=/usr/local/opt/fzf      " Enable fzf
set rtp+=~/.fzf                  " Enable fzf on Linux

" Leader is now space, using that for shortcuts
let mapleader = ' '

" -----------
" Mappings
" -----------
nmap <Leader>f :GFiles<CR> " Fzf files tracked by Git
nmap <Leader>F :Files<CR> " Fzf files in path
nmap <Leader>b :Buffers<CR> " Fzf buffers
nmap <Leader>a :ALEToggleBuffer<CR>  " Toggles lint/syntax
nmap <Leader>c :setlocal list!<CR>:setlocal list?<CR> " Toggle displaying all characters:
nmap <Leader>s :setlocal invspell<CR> " Toggle spellcheck
" TODO: Command history can be searched, but they're not executing
nmap <Leader>: :History:<CR>  " Fzf vim command history
nmap <Leader>h :History<CR>   " Fzf open file history
nmap <Leader>M :Maps<CR>      " Fzf browse shortcut mappings
nmap <Leader>' :Marks<CR>
nmap <Leader><Leader>h :Helptags!<CR>
" Search all files in path for string
nmap <Leader>/ :Ag<Space>
nmap <C-e> :e#<CR>     " Open previous buffer
" Edit document
nmap <Leader>e :e<Space>
nmap <C-n> :bnext<CR>  " Move between open buffers.
nmap <C-p> :bprev<CR>  " Move between open buffers.
nmap <Leader>q :q<CR>  " Quit
nmap <Leader>w :w<CR>  " Write
nmap <Leader>x :x<CR>  " Write Quit
" Open bash terminal
nmap <Leader>t :term bash<CR>

nmap <CR> o<Esc>       " Open lines, but stay in normal mode
nmap <Leader>j :ALENextWrap<CR>
nmap <Leader>k :ALEPreviousWrap<CR>

" Use different key mappings for easy navigation between splits to save a keystroke. Instead of ctrl-w then j, just ctrl-j "
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Left mouse click enters insert mode instead of visual
" map <LeftMouse> <LeftMouse>i
vnoremap . :norm.<CR> " Enable . in visual mode
nnoremap <Leader>, :nohlsearch<CR> " turn off search highlight
noremap U <C-R> " Redo with U instead of <C-R>
inoremap <S-Tab> <C-d> " Shift-Tab shift current line left 2 spaces in insert mode

" -----
" ALE
" -----
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
highlight link ALEWarningSign String
highlight link ALEErrorSign Title
augroup VimDiff
  autocmd!
  autocmd VimEnter,FilterWritePre * if &diff | ALEDisable | endif
augroup END

" Lightline
let g:lightline = {
\ 'colorscheme': 'PaperColor_light',
\ 'active': {
\   'left': [['relativepath', 'modified']],
\   'right': [['line_total'], ['percent'], ['column'], ['readonly', 'trailling_space', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK',
\   'trailling_space': 'StatuslineTrailingSpaceWarning',
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'trailling_space': 'warning',
\   'linter_errors': 'error',
\ },
\ 'component': {
\   'line_total': '%L lines',
\ },
\ }

colors PaperColor

" -----------
" Functions
" -----------
function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction
function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction
function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

"return '[\s]' if trailing white space is detected
"return '' otherwise
function! StatuslineTrailingSpaceWarning()
  if !exists("b:statusline_trailing_space_warning")
    if !&modifiable
      let b:statusline_trailing_space_warning = ''
      return b:statusline_trailing_space_warning
    endif
    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = '[\s]'
    else
      let b:statusline_trailing_space_warning = ''
    endif
  endif
 return b:statusline_trailing_space_warning
endfunction

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

" Update the lightline scheme from the colorscheme. Hopefully.
function! s:UpdateLightlineColorScheme()
  let g:lightline.colorscheme = g:colors_name
  call lightline#init()
endfunction

augroup _lightline
  autocmd!
  autocmd User ALELint call s:MaybeUpdateLightline()
  autocmd ColorScheme * call s:UpdateLightlineColorScheme()
augroup END
